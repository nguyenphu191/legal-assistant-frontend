'use client';

import { useState } from 'react';
import Header from '@/components/layout/Header';
import Sidebar from '@/components/layout/Sidebar';
import { 
  PaperAirplaneIcon,
  PaperClipIcon,
  MicrophoneIcon 
} from '@heroicons/react/24/outline';
import styles from './chat.module.css';

interface Message {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

export default function ChatPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: 'Xin ch√†o! T√¥i l√† AI Tra c·ª©u Lu·∫≠t. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc v·ªÅ ph√°p lu·∫≠t, so·∫°n th·∫£o h·ª£p ƒë·ªìng, tra c·ª©u vƒÉn b·∫£n ph√°p lu·∫≠t v√† nhi·ªÅu h∆°n n·ªØa. B·∫°n c√≥ c√¢u h·ªèi g√¨ c·∫ßn t√¥i h·ªó tr·ª£ kh√¥ng?',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, assistantMessage]);
      setIsTyping(false);
    }, 2000);
  };

  const handleQuickAction = (text: string) => {
    setInputValue(text);
  };

  return (
    <div className={styles.chatContainer}>
      <Header 
        onMenuToggle={() => setSidebarOpen(!sidebarOpen)}
        user={{ name: 'Ng∆∞·ªùi d√πng' }}
      />
      
      <div className={styles.chatLayout}>
        <Sidebar 
          isOpen={sidebarOpen} 
          onClose={() => setSidebarOpen(false)} 
        />
        
        <main className={styles.mainContent}>
          {/* Chat messages area */}
          <div className={styles.messagesArea}>
            {messages.length === 0 ? (
              /* Welcome screen */
              <div className={styles.welcomeScreen}>
                <div className={styles.welcomeLogo}>
                  <span>AI</span>
                </div>
                
                <h1 className={styles.welcomeTitle}>
                  AI Tra c·ª©u Lu·∫≠t c√≥ th·ªÉ h·ªó tr·ª£ g√¨ cho b·∫°n?
                </h1>
                
                <p className={styles.welcomeDescription}>
                  T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tra c·ª©u vƒÉn b·∫£n ph√°p lu·∫≠t, gi·∫£i ƒë√°p th·∫Øc m·∫Øc ph√°p l√Ω, 
                  so·∫°n th·∫£o h·ª£p ƒë·ªìng v√† nhi·ªÅu h∆°n n·ªØa.
                </p>

                {/* Quick actions */}
                <div className={styles.quickActions}>
                  <button
                    onClick={() => handleQuickAction('Tra c·ª©u Ngh·ªã quy·∫øt v·ªÅ thu·∫ø nh·∫≠p kh·∫©u 2024')}
                    className={styles.quickAction}
                  >
                    <div className={styles.actionTitle}>üìã Tra c·ª©u vƒÉn b·∫£n</div>
                    <div className={styles.actionDescription}>T√¨m ki·∫øm ngh·ªã quy·∫øt, th√¥ng t∆∞, quy·∫øt ƒë·ªãnh...</div>
                  </button>
                  
                  <button
                    onClick={() => handleQuickAction('H∆∞·ªõng d·∫´n t√≠nh thu·∫ø nh·∫≠p kh·∫©u h√†ng h√≥a')}
                    className={styles.quickAction}
                  >
                    <div className={styles.actionTitle}>üí° T∆∞ v·∫•n ph√°p l√Ω</div>
                    <div className={styles.actionDescription}>Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ ph√°p lu·∫≠t</div>
                  </button>
                  
                  <button
                    onClick={() => handleQuickAction('So·∫°n h·ª£p ƒë·ªìng mua b√°n h√†ng h√≥a')}
                    className={styles.quickAction}
                  >
                    <div className={styles.actionTitle}>üìù So·∫°n h·ª£p ƒë·ªìng</div>
                    <div className={styles.actionDescription}>T·∫°o c√°c lo·∫°i h·ª£p ƒë·ªìng ph·ªï bi·∫øn</div>
                  </button>
                  
                  <button
                    onClick={() => handleQuickAction('Th·ªß t·ª•c ƒëƒÉng k√Ω kinh doanh')}
                    className={styles.quickAction}
                  >
                    <div className={styles.actionTitle}>üè¢ Th·ªß t·ª•c h√†nh ch√≠nh</div>
                    <div className={styles.actionDescription}>H∆∞·ªõng d·∫´n c√°c th·ªß t·ª•c c·∫ßn thi·∫øt</div>
                  </button>
                </div>
              </div>
            ) : (
              /* Chat messages */
              <div className={styles.chatMessages}>
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`${styles.messageRow} ${styles[message.type]}`}
                  >
                    <div className={`${styles.message} ${styles[message.type]}`}>
                      {message.type === 'assistant' && (
                        <div className={styles.assistantHeader}>
                          <div className={styles.assistantLogo}>
                            <span>AI</span>
                          </div>
                          <span className={styles.assistantName}>AI Tra c·ª©u Lu·∫≠t</span>
                        </div>
                      )}
                      <div className={styles.messageContent}>{message.content}</div>
                      <div className={styles.messageTime}>
                        {message.timestamp.toLocaleTimeString('vi-VN', { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })}
                      </div>
                    </div>
                  </div>
                ))}
                
                {isTyping && (
                  <div className={styles.typingIndicator}>
                    <div className={styles.typingMessage}>
                      <div className={styles.typingHeader}>
                        <div className={styles.typingLogo}>
                          <span>AI</span>
                        </div>
                        <div className={styles.typingDots}>
                          <div className={styles.typingDot} />
                          <div className={styles.typingDot} />
                          <div className={styles.typingDot} />
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Input area */}
          <div className={styles.inputArea}>
            <form onSubmit={handleSendMessage} className={styles.inputForm}>
              <div className={styles.inputContainer}>
                <div className={styles.inputWrapper}>
                  <textarea
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n t·∫°i ƒë√¢y..."
                    className={styles.textInput}
                    rows={1}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        handleSendMessage(e);
                      }
                    }}
                  />
                  
                  <div className={styles.inputActions}>
                    <button
                      type="button"
                      className={styles.actionButton}
                    >
                      <PaperClipIcon />
                    </button>
                    <button
                      type="button"
                      className={styles.actionButton}
                    >
                      <MicrophoneIcon />
                    </button>
                  </div>
                </div>
                
                <button
                  type="submit"
                  disabled={!inputValue.trim() || isTyping}
                  className={styles.sendButton}
                >
                  <PaperAirplaneIcon />
                </button>
              </div>
              
              <div className={styles.inputFooter}>
                <span className={styles.charCount}>{inputValue.length}/2000</span>
                <span className={styles.disclaimer}>
                  Th√¥ng tin ƒë∆∞·ª£c t·∫°o ra b·∫±ng AI. H√£y lu√¥n c·∫©n tr·ªçng v·ªõi vi·ªác s·ª≠ d·ª•ng th√¥ng tin AI m·ªôt c√°ch c√≥ tr√°ch nhi·ªám.{' '}
                  <button>
                    Xem th√™m v·ªÅ Quy·ªÅn ri√™ng t∆∞ c·ªßa b·∫°n v√† ·ª©ng d·ª•ng AI Tra C·ª©u Lu·∫≠t.
                  </button>
                </span>
              </div>
            </form>
          </div>
        </main>
      </div>
    </div>
  );
}